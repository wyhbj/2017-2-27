Jquery：
	js的类库（面向对象写的），咋们是用。
	各种浏览器都兼容，可以使用很多便利的方法来写js
	吃的少，干的多。
		jq版本：
			1字开头的
				1.72 ...
				是兼容了ie低版本的（没有新特性）。
			3字开头的
				不兼容IE低版本，有些新的特性
					
				后缀不带min的版本为学习版 如：jquery-3.1.1.js
					
				后缀带min的版本为压缩版 如：jquery-3.1.1.min.js
					
			http://www.jquery123.com/ 中文学习文档	
			
			http://www.jb51.net/shouce/jquery1.82/ 学习的API文档
			
			用JQ的时候，实现某个效果*思路和以前写原生一样*，只是写法不一样
	$('#btn').click(function(){
		$('#div').toggle(500);//显示或隐藏
		$('#div').css('background','yellow');
	});

	$('div[class|="div"]')
	<div class="div">1</div>
	<div class="div-box">3</div>

	$('div[class*="div"]')
	<div class="div">1</div>
	<div class="div1">2</div>
	<div class="div-box">3</div>
	<div class="name-div">5</div>

	$('div[class$="div"]')
	$('div[class^="div"]')
	属性：[key $= value]:找到只要value值结尾的所有元素
	[key ^= value]:找到只要value值开头的所有元素

	[class!="div"] :找到class不为div的所有

	 $(':button')  找到所有input为button的元素
	 $(':checkbox') 找到所有input为checkbox的元素
	 $(':checked') 选中的checkbox元素

	even:偶数，从0开始计算。  0 , 2 , 4 , 6
	odd:奇数，从0开始计算。    1 , 3 , 5 ..

	找到属性为li的最后一个或者第一个：第一个（first()|[]:first）,最后一个（last()|[]:last）
	$('li[class="li"]').first().css('background','red');
	$('li[class="li"]:last').css('background','red');

	:first-child，找到一组兄弟元素的第一个
	$('li:first-child').css('background','red');
	$('li:last-child').css('background','red');

	:gt(index)
		找到相同元素 大于某个index值
	:lt(index)
		找到相同元素 小于某个index值
	:eq(index)
		找到相同元素 指定某个index值

	html:
		就当做innerHTML(放标签就变为标签)
	text:
		专门来操作元素的文本内容的（放标签就变为文本内容显示）
	$('#div1').html('<div>123456</div>');
	$('#div1').text('<div>123456</div>');

	console.log($('li').length);

	循环:
	$(ele).each(function(索引,元素){})
	var arr = ['第一个内容','第二个内容','第三个内容','第四个内容','第四个内容'];
	$('li').each(function(index,ele){
		//ele 不是JQ对象，是原生的对象，如果要使用JQ的方法，那么要用$(包一下)
		$(ele).click(function(){
			$(ele).text(arr[index]);
		});
	});

	$(this)
	 	JQ中可以写原生
	 	但是原生不能写JQ,因为原生对象不是JQ对象

	css()
	参数：
		字符串：1个为获取
		对象:批量化设置
				
		2个
		设置。
	console.log($('li').css({
		'width':200,
		'height':200,
		'background':'greenyellow',
		'marginTop':10
	}));
	console.log($('li').css('width','200px'));

	如果原生要用jQ，那么用$()包一下，就让原生对象变成了JQ对象
	JQ对象转原生对象用get(index),转完之后就可以用原生的方法了
	或者直接用下标[index];
	$(document).click(function(){
		//console.log($('#tex').scrollHeight())
		//console.log($('#tex').get(0).scrollHeight)
		console.log($('#tex')[0].scrollHeight);
	});
	添加class   addClass(class名)
	删除class   removeClass(class名)
	$(this)  ->  一般触发事件的元素
	index() ->  能够自动匹配*当前的元素在兄弟节点中的索引位置*。
	一般用index的时候，最好在index(精确匹配要找的元素)
	get(num)与eq(num)的区别：
		相同点：
			都是找索引对应的元素
		不同点:
			get是将JQ对象转原生，这个时候就用不了JQ的方法了（原生元素）
			eq是JQ元素
	siblings:以当前元素为基准，别的所有兄弟元素，所以一般使用需要在siblings(给个精确的范围)
	$(':button').click(function(){
		$(this).addClass('active').siblings('input').removeClass('active');
		//$('#box div').eq($(this).index()).addClass('show').siblings('div').removeClass('show');
		$('#box div').eq($(this).index('input')).show().siblings('div').hide();
		
	});
	//链式操作
	$(document).click(function(){
		$('#box').css({
			width:100,
			height:100
		}).css('background','red').animate({
			opacity:0
		});
	})
	$('div').click(function(){
		alert($(this).index())
		return false; //既能阻止冒泡，也能阻止默认行为
	});
	children(); 找到某个元素下的所有子元素。
		通过缓存一个代码块，从代码块中去获取元素，与getElementsByTagName一样，性能就高。(find('*'))
		find找到某个元素下的所有指定的元素(可以用选择器)
	//console.log($('#ul li'))//性能极低，先找li再找ul
	console.log($('#ul').children())
	console.log($ul.find('li[class^="li1"]'));

	hide()   display:none
	show()   display:block
	$('a').click(function(){
		$(this).parent().hide();
	});
	prev()  上一个兄弟节点
	next()   下一个兄弟节点
	first()  第一个节点
	last()	 最后一个节点
	例子：兄弟节点操作
	var lis = $('li');
	lis.mouseover(function(){
		//移入的是第一个或者是最后一个
		if(!$(this).prev().length || !$(this).next().length){
			$(this).addClass('side');
		}else{
			//当前这个变，上个下个变
			$(this).addClass('focus');
			$(this).next().addClass('near');
			$(this).prev().addClass('near');	
		}
		//最后一个和第一个清空
		lis.first().removeClass('near').addClass('none');
		lis.last().removeClass('near').addClass('none');
	});
	
	lis.mouseout(function(){
		lis.attr('class','');
		lis.first().addClass('none');
		lis.last().addClass('none');
	});
	创建元素
		var li = document.createElement('li');
		var li = $('<li>123</li>');
		'<div>'+
		'</div>'
		字符串模板：
			`字符串，可以换行，传数据的时候${要填的数据}`
			`<div>
				${num}
			</div>`
		添加：
			append() 尾部添加
			appendTo() 尾部添加  方便链式操作
	$(document).click(function(){
		$(`<li>
		 	<div>
		 		<span> ${num} </span>
		 	</div>
	  	</li>`).appendTo('#ul').css('width','100px');
		num++;
		//$('#ul').append(li);
		
	});
	要添加的元素.insertAfter(添加到谁的后面)
	要添加的元素.insertBefore(添加到谁的前面)
		
	添加到谁的前面.before(要添加的元素):原生的insertBefore
	添加到谁的后面.after(要添加的元素):添加到某个元素的后面
	var num = 1;
	$(document).click(function(){
		var li = $(`<li>${num}</li>`)
		num++;
		//$(li).insertBefore($('li').eq(0))
		//$(li).insertAfter($('li').eq(0))
		//$('li').eq(0).before(li) //前堆
		$('li').eq(0).after(li);//后堆
	});